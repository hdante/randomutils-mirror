MEMPASSWORD(1)
==============
:doctype: manpage
:man source: randomutils
:man version: 53.10.19
:man manual: General Commands Manual
:revdate: August 2022

NAME
----
mempassword - Generate hard to guess, easy to remember passwords

SYNOPSIS
--------
*mempassword* [_OPTION_] [--] [_wordfile_]

*mempassword* *-h*|*-?*

*mempassword* *-v*

DESCRIPTION
-----------
Generates passwords in the following format: a set of symbols, followed by a
separator, followed by a list of words from a dictionary. Example:

    vR%e:-roughening,clouding,Carpathian's,retrying

The string used for the separator is ``:-''. Words are separated with commas.
The initial symbols are the 94 ASCII graphic characters. Words are randomly
chosen from a text file containing one word per line. Words are chosen
uniformly, independently and may repeat. The word file may be specified on the
command line, else the default /usr/share/dict/words will be used. If the file
name starts with the minus character (``-''), prepend it with the *--*
option to disable option parsing.

The random values are generated with a cryptographically secure pseudo-random
number generator (CSPRNG), seeded by the operating system supplied entropy
source.

Option arguments are the following:

*-n* _num_::
  Set the number of passwords to be generated. Must be a positive number.
  The default is 5.
*-s* _sym_::
  Set the number of symbols per password. Must be a positive number. The
  default is 4.
*-w* _words_::
  Set the number of words per password. Must be between 1 and 128. The
  default is 4.
*-h*, *-?*::
  Show help message instead of generating random numbers.
*-v*::
  Show program version number instead of generating random numbers.

EXAMPLES
--------
Generate a set of passwords:

    $ mempassword
    .9=L:-discordantly,Tompkins,alphabetizations,accusing
    B~N9:-sadness's,goalscorers,inarticulateness,diplomatically
    |xkw:-trawlers,distaste's,mingling,koalas
    5f}v:-bream,quart's,palomino's,Amerind's
    &J<O:-clomp,corruptible,specialties,gimmicky

Generate 3 passwords with 1 symbol from a specified dictionary:

    $ mempassword /tmp/7776palavras.txt -n 3 -s 1
    X:-códice,ajudar,bordado,compota
    =:-traça,zunir,situ,gravata
    @:-aprumo,carimbo,vazão,moroso

Generate a 15 symbol and 1 word password:

    $ mempassword -s 15 -w 1 -n 1
    xD+oEz]Gflff[4{:-immeasurable


EXIT STATUS
-----------
*0*::
  Success.

*1*::
  Failure (syntax or usage error; any I/O error; entropy system call error).

PASSWORD DIFFICULTY
-------------------
There are two difficulty measurements available for the generated password, when
considering a brute-force attack, one is considering that the password format is
not known (so it's assumed to be fully composed of any one of the 94 graphic
ASCII characters), and another where the attacker knows the password format
(first symbols, then a separator, then words from a specific dictionary).

When the password format is not known, the number of combinations is 94 raised
to the power of the number of characters in a password. For example, a typical
fully random 8 symbol password can be one of 6095689385410816 combinations, or,
to avoid dealing with the large number, take the base 2 logarithm of the result
to find the number of bits required to store it: 53 bits of information. For a
password with 4 symbols and 4 words with 6 characters each, there are a total of
33 characters: 4 random symbols, 2 separator symbols, 24 characters for the
words and 3 commas. The number of brute-force combinations in this case is 94 to
the power of 33, which contains 217 bits of information.  When comparing the 8
character and the 33 character passwords, one is slightly more than 4 times
bigger, so it also requires 4 times more bits of information. This 4x increase
in number of bits results in an exponential increase in the difficulty of
cracking the password (it's 94²⁵ times harder to crack it).

When the password format is known, it will represent less information and the
amount depends on the size of the dictionary. Only the random symbols and the
different words need to be changed, not the fixed separator, nor the commas. An
example with 4 random symbols and 4 words from a 10 thousand word dictionary
gives 780748960000000000000000 different combinations, or 80 bits of
information.  Since 1 random ASCII symbol has approximatelly 6.55459 bits of
information, the 80-bit password is as hard to crack as a 12 to 13 character
password (but easier to remember, since it only contains ``8 things'' to
remember, instead of 12).  Natural language dictionaries typically have sizes
between 10 thousand and 200 thousand words, and any dictionary between 8836 and
830584 words will have as much information as 2 to 3 ASCII symbols.

When considering non-ASCII characters, the amount of information may change
moderately or drastically, depending on the characters considered. For example,
when considering a 10000-character logographic alphabet, with 1 character
representing 1 word or 1 symbol, the 4 symbol, 4 word password results in a 13
character password with 173 bits of information when the format is unknown (less
than the ASCII version) and 107 bits when the format and dictionary is known
(more than the ASCII version).

CRYPTANALYSIS
-------------
Current code utilizes an implementation of the 20-round Chacha20 cipher with
native-endian 32-bit integer numbers (it does not consider numbers to be
little-endian). The code was not reviewed by a cryptanalist.

AUTHOR
------
Henrique Dante de Almeida, <hdante@gmail.com>.

COPYRIGHT
---------
Copyright © 2022 Henrique Dante de Almeida. License GPLv3: GNU GPL version 3,
<https://gnu.org/licenses/gpl.html>. This is free software: you are free to
change and redistribute it. There is NO WARRANTY, to the extent permitted by
law.
